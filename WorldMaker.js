/*globals define*/
/*eslint-env node, browser*/

/**
 * Generated by PluginGenerator 2.20.5 from webgme on Thu Jun 20 2019 09:46:26 GMT-0700 (Pacific Daylight Time).
 * A plugin that inherits from the PluginBase. To see source code documentation about available
 * properties and methods visit %host%/docs/source/PluginBase.html.
 */

define([
    'plugin/PluginConfig',
    'text!./metadata.json',
    'plugin/PluginBase'
], function (
    PluginConfig,
    pluginMetadata,
    PluginBase) {
    'use strict';

    pluginMetadata = JSON.parse(pluginMetadata);

    /**
     * Initializes a new instance of WorldMaker.
     * @class
     * @augments {PluginBase}
     * @classdesc This class represents the plugin WorldMaker.
     * @constructor
     */
    function WorldMaker() {
        // Call base class' constructor.
        PluginBase.call(this);
        this.pluginMetadata = pluginMetadata;
    }

    /**
     * Metadata associated with the plugin. Contains id, name, version, description, icon, configStructure etc.
     * This is also available at the instance at this.pluginMetadata.
     * @type {object}
     */
    WorldMaker.metadata = pluginMetadata;

    // Prototypical inheritance from PluginBase.
    WorldMaker.prototype = Object.create(PluginBase.prototype);
    WorldMaker.prototype.constructor = WorldMaker;

    /**
     * Main function for the plugin to execute. This will perform the execution.
     * Notes:
     * - Always log with the provided logger.[error,warning,info,debug].
     * - Do NOT put any user interaction logic UI, etc. inside this method.
     * - callback always has to be called even if error happened.
     *
     * @param {function(Error|null, plugin.PluginResult)} callback - the result callback
     */
    WorldMaker.prototype.main = function (callback) {

        /**
        this.logger.debug('This is a debug message.');
        this.logger.info('This is an info message.');
        this.logger.warn('This is a warning message.');
        this.logger.error('This is an error message.');
        */

        var self = this,
            core = this.core,
            logger = this.logger,
            modelJson = {
                name: '',
                models: [],
                planes: [],
                posModels: [],
                jerWorlds: []
                },
            activeNode = this.activeNode;

        function getModels(node)
        {
            var modelData= {
                name: '',
                x_coord: 0,
                y_coord: 0,
                z_coord: 0,
                xi_coord: 0,
                yi_coord: 0,
                zi_coord: 0
            };

            modelData.name = core.getAttribute(node, 'name');
            modelData.x_coord = core.getAttribute(node, 'x_location');
            modelData.y_coord = core.getAttribute(node, 'y_location');
            modelData.z_coord = core.getAttribute(node, 'z_location');
            modelData.xi_coord = core.getAttribute(node, 'xi_location');
            modelData.yi_coord = core.getAttribute(node, 'yi_location');
            modelData.zi_coord = core.getAttribute(node, 'zi_location');

            modelJson.models.push(modelData);
        }

        function getPosModels(node){
            var posModelData = {
                name: '',
                x_coord: 0,
                y_coord: 0,
                yaw: 0
            }

            posModelData.name = core.getAttribute(node, 'name');
            var posModelPos = self.core.getRegistry(node, 'position');

            // the "position" values are pretty big so we will divide them by 10 to scale down.
            posModelData.x_coord = posModelPos.x / 10;
            posModelData.y_coord = posModelPos.y / 10;

            //not sure of angle variable?
            //posModelData.yaw = posModelPos.angle;
            posModelData.yaw = core.getAttribute(node, 'yaw');

            modelJson.posModels.push(posModelData);

        }

        function getPlanes(node)
        {
            var planeData= {
                name: '',
                x_coord: 0,
                y_coord: 0
            };

            planeData.name = core.getAttribute(node, 'name');
            planeData.x_coord = core.getAttribute(node, 'x_location');
            planeData.y_coord = core.getAttribute(node, 'y_location');

            modelJson.planes.push(planeData);
        }

        function getJerseyWorld(node)
        {
            var jerWorldData = {
                x_coord: 0,
                y_coord: 0
            };

            jerWorldData.name = core.getAttribute(node, 'name');
            var jerWorldPos = self.core.getRegistry(node, 'position');

            // the "position" values are pretty big so we will divide them by 10 to scale down.
            jerWorldData.x_coord = jerWorldPos.x / 10;
            jerWorldData.y_coord = jerWorldPos.y / 10;

            modelJson.jerWorlds.push(jerWorldData);
        }


        function getWorldFile(){

            var worldFile = '';

            worldFile += "<?xml version=\"1.0\" ?><sdf version=\"1.4\">\n<world name=\"default\">\n<include>\n<uri>model://ground_plane</uri>" +
        "\n</include>\n<include>\n<uri>model://sun</uri>\n</include>";

            modelJson.models.forEach(function (data){
                worldFile += "\n<include>\n<name>"+data.name+"</name>\n<pose>"+ data.x_coord + " " + data.y_coord + " " +
                data.z_coord + " " + data.xi_coord + " " + data.yi_coord + " " + data.zi_coord + "</pose>\n<uri>model://" +
                data.name + "</uri>\n</include>";
            });

            modelJson.planes.forEach(function (data){
                worldFile += "\n<include>\n<name>"+data.name+"</name>\n<pose>" + data.x_coord + " " + data.y_coord + " " +
                    "0 0 0 0 </pose>\n<uri>model://" + data.name + "</uri>\n</include>";
            });

            modelJson.posModels.forEach(function (data){
                worldFile += "\n<include>\n<name>"+data.name+"</name>\n<pose>" + data.x_coord + " " + data.y_coord + " " +
                    "1 0 0 " + data.yaw +  "</pose>\n<uri>model://" + data.name + "</uri>\n</include>";
            });

            // This takes all "jerWorld" objects and adds their location data to each object's data, therefore
            // translating the world accordingly.
            // NOTE: each object's data needs to be converted to float before it can be added.
            modelJson.jerWorlds.forEach(function(data){
                worldFile += "\n" +

                    "<include>\n<name>'asphalt_plane'</name>" +
                    "<pose frame=''>" + (0+data.x_coord) + " " + (0+data.y_coord) + " 0 0 -0 0</pose>\n" +
                    "<uri>model://asphalt_plane</uri></include>\n\n" +

                    "<include><name>'bookshelf'</name>\n" +
                    "<pose>" + (2.99082 + data.x_coord)+ " " + (5.35743+data.y_coord) + " 0 0 -0 0</pose>\n" +
                    "<uri>model://bookshelf</uri></include>\n\n" +

                    "<include><name>'cardboard_box'</name>" +
                    "\n<pose frame=''>" + (2.81621+data.x_coord) + " " + (-1.77255+data.y_coord) + " 0.199 0 -0 0</pose>" +
                    "\n<uri>model://cardboard_box</uri></include>\n\n" +

                    "<include><name>'jersey_barrier'</name>" +
                    "\n<pose>" + (-9.43548+data.x_coord) + " " + (1.26022+data.y_coord) + " 0 0 0 -1.54804</pose>" +
                    "\n<uri>model://jersey_barrier</uri></include>\n\n" +

                    "<include><name>'jersey_barrier_0'</name>" +
                    "<pose frame=''>" + (-9.46749+data.x_coord) + " " + (-3.323+data.y_coord) + " 0 0 0 -1.56717</pose>" +
                    "\n<uri>model://jersey_barrier</uri></include>\n\n" +

                    "<include><name>'jersey_barrier_1'</name>\n" +
                    "<pose frame=''>" + (-9.47314+data.x_coord) + " " + (-7.77695+data.y_coord) + " 0 0 0 -1.58805</pose>" +
                    "\n<uri>model://jersey_barrier</uri></include>\n\n" +

                    "<include><name>'jersey_barrier_2'</name>" +
                    "\n<pose frame=''>"+(-9.21636+ data.x_coord) + " " + (5.7901+ data.y_coord) +
                    " 0 0 -0 1.54456</pose><uri>model://jersey_barrier</uri></include>\n\n" +

                    "<include><name>'post_office'</name>\n" +
                    "<pose frame=''>" + (6.89975+data.x_coord) +" "+ (-3.51177+data.y_coord) + " 0 0 -0 1.52992</pose>" +
                    "<uri>model://post_office</uri></include>\n\n" +

                    "<include><name>'postbox'</name>" +
                    "\n<pose>" + (0.792086+data.x_coord) + " " + (0.486382+data.y_coord) + " 0 0 -0 0</pose>" +
                    "<uri>model://postbox</uri></include>\n\n";
            });

            worldFile  += "\n<gui fullscreen='0'>\n<camera name='user_camera'>\n<pose>20 -20 20 0.000000 0.6 2.356190</pose>" +
                "\n<view_controller>orbit</view_controller>\n</camera>\n</gui>\n</world></sdf>";

            return worldFile;
        }



        // This will save the changes. If you don't want to save;
        // exclude self.save and call callback directly from this scope.
        self.loadNodeMap(this.activeNode)
            .then(function(nodes) {
                var nodePath,
                    node;
                for (nodePath in nodes) {
                    self.logger.info(self.core.getAttribute(nodes[nodePath], 'name'), 'has path', nodePath);
                }

                modelJson.name = core.getAttribute(activeNode, 'name');

                var childrenPaths = core.getChildrenPaths(activeNode);

                for (var i = 0; i < childrenPaths.length; i += 1) {
                    node = nodes[childrenPaths[i]];
                    if(self.isMetaTypeOf(node, self.META.CollectionOfModels)){
                        // Must determine which by name.
                        //if(core.getAttribute(activeNode, 'name') == "road_with_jerseyB"){
                            getJerseyWorld(node);
                        //}
                    }else if (self.isMetaTypeOf(node, self.META.Models)) {
                        getModels(node);
                    }else if (self.isMetaTypeOf(node, self.META.Planes)) {
                        getPlanes(node);
                    }else if(self.isMetaTypeOf(node, self.META.PositionModel)){
                        getPosModels(node);
                    }
                }
                
                self.logger.info('Extracted data:\n', JSON.stringify(modelJson, null, 2));
                
                var worldFile = getWorldFile();
                
                return self.blobClient.putFile(modelJson.name + '.world', worldFile);
            })

            .then(function (metadataHash){
            self.result.addArtifact(metadataHash);
                self.result.setSuccess(true);
                callback(null, self.result);
            })
            .catch(function(err){
                // Result success is false at invocation.
                self.logger.error(err.stack);
                callback(err, self.result);
            });
    };


    return WorldMaker;
});
